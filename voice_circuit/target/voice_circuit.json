{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":3702718277076930017,"abi":{"parameters":[{"name":"voice_embedding","type":{"kind":"array","length":256,"type":{"kind":"field"}},"visibility":"private"},{"name":"command_hash","type":{"kind":"field"},"visibility":"private"},{"name":"voice_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"expected_command_hash","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"","debug_symbols":"5dzfilRXFsDhd+lrL2qt/T+vMgzBGBME0aBmYAh59zk9k3acjgkEJ5DV341Qemq7l+fU9gda309337785sfvv3715ru37++++ttPd6/fvnj+4dXbN9ern+5u//6p9z88f3P/6v2H5+8+3H0Vez+7e/nm27uvMufPz+6+e/X65d1XM35+9utLo/1yaYxPLs3PXdrX+HhttI8X5+0zF+ct4mEPt7Z//+KWp/9ycWttfXrx35/dxZMYsd/yYcQ++qMR8+nfxfb072L/q47Y8uMe2tqPdj2+dNdnfFz89td89uaTGPF3n7319O/ifvp38fxVR/zdEyRuT//hi3j6T18kcB8bcB97zWMEKJEAUiSAFgkgRqJmjSRQIwnUSAI1kkCNZK95jAA1kkCNJFAjCdRI1qyRBtRIA2qkATXSgBppveYxAtRIA2qkATXSgBppNWukAzXSgRrpQI10oEZ6r3mMADXSgRrpQI10oEZ6zRoZQI0MoEYGUCMDqJHRax4jQI0MoEYGUCMDqJFRs0YmUCMTqJEJ1MgEamT2mseI8H0aoEYmUCMTqJFZs0YWUCMLqJEF1MgCamT1mscIUCNL+HovUCMLqJFVs0Y2UCMbqJEN1MgGamT3mscIUCMbqJEtaCNAjeyaNXKAGjlAjRygRg5QI6fXPEaAGjlAjRygRo6An1XVzwT+7Cb4ZzcBQLsJAtqtFz1LBAPtJiBoN0FBuwkM2q1olxgsq9AlBMxKyKxVaVbCZiVwVkJnJXjWoj5rCEBrCEJrCERrCEZrFEVaQ1BaQ2BaQ3BaQ4Bao6jUGgLVGoLVGgLWGoLWGkW51hC81hDA1hDE1hDI1ihqtoaAtoagtobAtobgtkZRuDUEuTUEujUEuzUEvDWK6q0h8K0h+K0hAK4hCK5RlHANwXANAXENQXENgXGNoo5rCJBrCJJrCJRrCJZrFMVcQ9BcQ+BcQ/BcQwBdo6joGgLpGoLpGgLqGoLqGkVZ1xBc1xBg1xBk1xBo1yhqu4aAu4agu4bAu4bgu0ZR4DUE4TUE4jUE4zUE5DWKKq8hMK8hOK8hQK8hSK9RlHoNwXoNAXsNQXsNgXuNot5rCt5rCt5rCt5rCt5r3nrRswTokhS81xS81xS81yzqvabgvabgvabgvabgvWZR7zUF7zUF7zUF7zUF7zWLeq8peK8peK8peK8peK9Z1HtNwXtNwXtNwXtNwXvNot5rCt5rCt5rCt5rCt5rFvVeU/BeU/BeU/BeU/Bes6j3moL3moL3moL3moL3mkW91xS81xS81xS81xS81yzqvabgvabgvabgvabgvWZR7zUF7zUF7zUF7zUF7zWLeq8peK8peK8peK8peK9Z1HtNwXtNwXtNwXtNwXvNot5rCt5rCt5rCt5rCt5rFvVeU/BeU/BeU/BeU/Bes6j3moL3moL3moL3moL3mkW91xS81xS81xS81xS81yzqvabgvabgvabgvabgvWZR7zUF7zUF7zUF7zUF7zWLeq9N8F6b4L02wXttgvfabr3oWQJ0SRO81yZ4r03wXltR77UJ3msTvNcmeK9N8F5bUe+1Cd5rE7zXJnivTfBeW1HvtQneaxO81yZ4r03wXltR77UJ3msTvNcmeK9N8F5bUe+1Cd5rE7zXJnivTfBeW1HvtQneaxO81yZ4r03wXltR77UJ3msTvNcmeK9N8F5bUe+1Cd5rE7zXJnivTfBeW1HvtQneaxO81yZ4r03wXltR77UJ3msTvNcmeK9N8F5bUe+1Cd5rE7zXJnivTfBeW1HvtQneaxO81yZ4r03wXltR77UJ3msTvNcmeK9N8F5bUe+1Cd5rE7zXJnivTfBeW1HvtQneaxO81yZ4r03wXltR77UJ3msTvNcmeK9N8F5bUe+1Cd5rE7zXJnivTfBeW1HvtQneaxO81yZ4r03wXltR77UL3msXvNcueK9d8F77rRc9S4Au6YL32gXvtQveay/qvXbBe+2C99oF77UL3msv6r12wXvtgvfaBe+1C95rL+q9dsF77YL32gXvtQveay/qvXbBe+2C99oF77UL3msv6r12wXvtgvfaBe+1C95rL+q9dsF77YL32gXvtQveay/qvXbBe+2C99oF77UL3msv6r12wXvtgvfaBe+1C95rL+q9dsF77YL32gXvtQveay/qvXbBe+2C99oF77UL3msv6r12wXvtgvfaBe+1C95rL+q9dsF77YL32gXvtQveay/qvXbBe+2C99oF77UL3msv6r12wXvtgvfaBe+1C95rL+q9dsF77YL32gXvtQveay/qvXbBe+2C99oF77UL3msv6r12wXvtgvfaBe+1C95rL+q9dsF77YL32gXvtQveay/qvQ7Bex2C9zoE73UI3uu49aJnCdAlQ/Beh+C9DsF7HUW91yF4r0PwXofgvQ7Bex1FvdcheK9D8F6H4L0OwXsdRb3XIXivQ/Beh+C9DsF7HUW91yF4r0PwXofgvQ7Bex1FvdcheK9D8F6H4L0OwXsdRb3XIXivQ/Beh+C9DsF7HUW91yF4r0PwXofgvQ7Bex1FvdcheK9D8F6H4L0OwXsdRb3XIXivQ/Beh+C9DsF7HUW91yF4r0PwXofgvQ7Bex1FvdcheK9D8F6H4L0OwXsdRb3XIXivQ/Beh+C9DsF7HUW91yF4r0PwXofgvQ7Bex1FvdcheK9D8F6H4L0OwXsdRb3XIXivQ/Beh+C9DsF7HUW91yF4r0PwXofgvQ7Bex1FvdcheK9D8F6H4L0OwXsdRb3XIXivQ/Beh+C9DsF7HUW91yl4r1PwXqfgvU7Be523XvQsAbpkCt7rFLzXKXivs6j3OgXvdQre6xS81yl4r7Oo9zoF73UK3usUvNcpeK+zqPc6Be91Ct7rFLzXKXivs6j3OgXvdQre6xS81yl4r7Oo9zoF73UK3usUvNcpeK+zqPc6Be91Ct7rFLzXKXivs6j3OgXvdQre6xS81yl4r7Oo9zoF73UK3usUvNcpeK+zqPc6Be91Ct7rFLzXKXivs6j3OgXvdQre6xS81yl4r7Oo9zoF73UK3usUvNcpeK+zqPc6Be91Ct7rFLzXKXivs6j3OgXvdQre6xS81yl4r7Oo9zoF73UK3usUvNcpeK+zqPc6Be91Ct7rFLzXKXivs6j3OgXvdQre6xS81yl4r7Oo9zoF73UK3usUvNcpeK+zqPc6Be91Ct7rFLzXKXivs6j3ugTvdQne6xK81yV4r+vWi54lQJcswXtdgve6BO91FfVel+C9LsF7XYL3ugTvdRX1XpfgvS7Be12C97oE73UV9V6X4L0uwXtdgve6BO91FfVel+C9LsF7XYL3ugTvdRX1XpfgvS7Be12C97oE73UV9V6X4L0uwXtdgve6BO91FfVel+C9LsF7XYL3ugTvdRX1XpfgvS7Be12C97oE73UV9V6X4L0uwXtdgve6BO91FfVel+C9LsF7XYL3ugTvdRX1XpfgvS7Be12C97oE73UV9V6X4L0uwXtdgve6BO91FfVel+C9LsF7XYL3ugTvdRX1XpfgvS7Be12C97oE73UV9V6X4L0uwXtdgve6BO91FfVel+C9LsF7XYL3ugTvdRX1XpfgvS7Be12C97oE73UV9V6X4L0uwXtdgve6BO91FfVet+C9bsF73YL3ugXvdd960bME6JIteK9b8F634L3uot7rFrzXLXivW/Bet+C97qLe6xa81y14r1vwXrfgve6i3usWvNcteK9b8F634L3uot7rFrzXLXivW/Bet+C97qLe6xa81y14r1vwXrfgve6i3usWvNcteK9b8F634L3uot7rFrzXLXivW/Bet+C97qLe6xa81y14r1vwXrfgve6i3usWvNcteK9b8F634L3uot7rFrzXLXivW/Bet+C97qLe6xa81y14r1vwXrfgve6i3usWvNcteK9b8F634L3uot7rFrzXLXivW/Bet+C97qLe6xa81y14r1vwXrfgve6i3usWvNcteK9b8F634L3uot7rFrzXLXivW/Bet+C97qLe6xa81y14r1vwXrfgve6i3usWvNcteK9b8F634L3uot7rEbzXI3ivR/Bej+C9nlsvepYAXXIE7/UI3usRvNdT1Hs9gvd6BO/1CN7rEbzXU9R7PYL3egTv9Qje6xG811PUez2C93oE7/UI3usRvNdT1Hs9gvd6BO/1CN7rEbzXU9R7PYL3egTv9Qje6xG811PUez2C93oE7/UI3usRvNdT1Hs9gvd6BO/1CN7rEbzXU9R7PYL3egTv9Qje6xG811PUez2C93oE7/UI3usRvNdT1Hs9gvd6BO/1CN7rEbzXU9R7PYL3egTv9Qje6xG811PUez2C93oE7/UI3usRvNdT1Hs9gvd6BO/1CN7rEbzXU9R7PYL3egTv9Qje6xG811PUez2C93oE7/UI3usRvNdT1Hs9gvd6BO/1CN7rEbzXU9R7PYL3egTv9Qje6xG811PUez2C93oE7/UI3usRvNdT1HuNmwC+XlMCZXJNCaTJNSXQJteUveqBAtTJNSWQJ9eUQJ9cUwKBck1ZtVAE+vWakigUAX+9piQKpSj/em2cKBQBgL2mJApFIGCvKasWioDAXlMShSIwsNeURKEUhWCvjROFIlCw15REoQgY7DVl1UIRONhrSqJQBBD2mpIolKIk7LVxolAEFPaakigUgYW9pqxaKAIMe01JFIpAw15TEoVSFIe9Nk4UisDDXlMShSIAsdeUVQtFIGKvKYlCEZDYa0qiUIoysdfGiUIRoNhrSqJQBCr2mrJqoQhY7DUlUSgCF3tNSRRKUTD22jhRKAIZe01JFIqAxl5TVi0UgY29piQKRYBjrymJQilKx14bJwpFwGOvKYlCEfjYa8qqhSIAsteURKEIhOw1JVEoRRHZa+NEoQiM7DUlUSgCJHtNWbVQBEr2mpIoFAGTvaYkCqUoJ3ttnCgUAZS9piQKRSBlrymLFkoQpmwQpmwQpmwQpmzcetUDRSiUIEzZIEzZIEzZqGrKBmHKBmHKBmHKBmHKRlVTNghTNghTNghTNghTNqqaskGYskGYskGYskGYslHVlA3ClA3ClA3ClA3ClI2qpmwQpmwQpmwQpmwQpmxUNWWDMGWDMGWDMGWDMGWjqikbhCkbhCkbhCkbhCkbVU3ZIEzZIEzZIEzZIEzZqGrKBmHKBmHKBmHKBmHKRlVTNghTNghTNghTNghTNqqaskGYskGYskGYskGYslHVlA3ClA3ClA3ClA3ClI2qpmwQpmwQpmwQpmwQpmxUNWWDMGWDMGWDMGWDMGWjqikbhCkbhCkbhCkbhCkbVU3ZIEzZIEzZIEzZIEzZqGrKBmHKBmHKBmHKBmHKRlVTNghTNghTNghTNghTNqqaskmYskmYskmYskmYsnnrVQ8UoVCSMGWTMGWTMGWzqimbhCmbhCmbhCmbhCmbVU3ZJEzZJEzZJEzZJEzZrGrKJmHKJmHKJmHKJmHKZlVTNglTNglTNglTNglTNquaskmYskmYskmYskmYslnVlE3ClE3ClE3ClE3ClM2qpmwSpmwSpmwSpmwSpmxWNWWTMGWTMGWTMGWTMGWzqimbhCmbhCmbhCmbhCmbVU3ZJEzZJEzZJEzZJEzZrGrKJmHKJmHKJmHKJmHKZlVTNglTNglTNglTNglTNquaskmYskmYskmYskmYslnVlM3Pm7LXP4M/vGnfPt34f97z2b/vP30O4n/ec7345t2r169fff/167cvnn949fbN+/s33u5/+I0voPz35sStjY/LxfrMjOv28DuvyE8vvd/t/nOXP1++fGsPy/fzaPnf+GLEH1v+4cFdsz1ePr58+f3wpKyzHi+ff+7y7YuX3zl/uXb3x7f2N/7z+x9b/uGDusd8vPz48uXXw63dv/7Dmf/H5c+j5/7n69U/nr979fyb1y/vP8n3v/jjmxcPH+zr5Yd//vDwKw8f/R/evX3x8tsf3728PwQ++fzfP+Lt9qyNa9lr6X8B","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"61":{"source":"mod utils;\n\nfn main(\n    voice_embedding: [Field; 256],\n    command_hash: Field,\n    voice_commitment: pub Field,\n    expected_command_hash: pub Field,\n) {\n    let calculated_commitment = utils::hash_embedding(voice_embedding);\n    assert(calculated_commitment == voice_commitment);\n    assert(command_hash == expected_command_hash);\n}\n","path":"/Users/fabiandiaz/personal-repos/voice-wallet/voice_circuit/src/main.nr"},"62":{"source":"use dep::std::hash::pedersen_hash;\n\npub fn hash_embedding(embedding: [Field; 256]) -> Field {\n    let mut hash = pedersen_hash([embedding[0], embedding[1]]);\n    for i in 2..256 {\n        hash = pedersen_hash([hash, embedding[i]]);\n    }\n    hash\n}\n","path":"/Users/fabiandiaz/personal-repos/voice-wallet/voice_circuit/src/utils.nr"}},"names":["main"],"brillig_names":["decompose_hint"]}